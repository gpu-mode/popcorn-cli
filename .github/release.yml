# .github/workflows/release.yml
name: Release Popcorn CLI

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v0.1.0, v1.2.3

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  # Job 1: Build binaries for different targets
  build:
    name: Build for ${{ matrix.target }}
    strategy:
      fail-fast: false # Don't cancel all builds if one fails
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: popcorn-cli # Name of the executable in target/release
            asset_name: popcorn-cli-linux-amd64.tar.gz # Name for the release file
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: popcorn-cli
            asset_name: popcorn-cli-macos-amd64.tar.gz
          # macOS arm64 (Apple Silicon)
          - os: macos-latest # Can cross-compile or use native runner if available
            target: aarch64-apple-darwin
            binary_name: popcorn-cli
            asset_name: popcorn-cli-macos-arm64.tar.gz
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: popcorn-cli.exe # Note the .exe extension
            asset_name: popcorn-cli-windows-amd64.zip

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Build binary
        # Ensure we build in the correct sub-directory
        working-directory: popcorn-cli/rust
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        # Path to binary is relative to the repo root: popcorn-cli/rust/target/<target>/release/
        # We create the archive in the repo root.
        run: |
          BINARY_PATH="popcorn-cli/rust/target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          tar czvf "${{ matrix.asset_name }}" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
        shell: bash

      - name: Package (Windows)
        if: runner.os == 'Windows'
        # Path to binary is relative to the repo root
        run: |
          Compress-Archive -Path "popcorn-cli/rust/target/${{ matrix.target }}/release/${{ matrix.binary_name }}" -DestinationPath "${{ matrix.asset_name }}"
        shell: pwsh

      - name: Upload artifact for release job
        # Upload the packaged archive, using the desired final asset name
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }} # Use asset name as artifact name
          path: ${{ matrix.asset_name }} # Path to the created archive at the repo root
          if-no-files-found: error # Fail if archive wasn't created

  # Job 2: Create GitHub Release and Upload Binaries
  release:
    name: Create GitHub Release
    needs: build # Run after all build jobs succeed
    runs-on: ubuntu-latest
    # Only run on tag pushes
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      # Download all artifacts. Since artifact names match asset names, they are ready for upload.
      # download-artifact@v4 downloads them into the current directory without extra subdirs by default
      # if no 'path' is specified and multiple artifacts are downloaded.
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        # No 'path' means download all artifacts to the current directory.
        # Artifacts were named like 'popcorn-cli-linux-amd64.tar.gz', so they'll be downloaded with those names.

      # Optional: List files to verify downloads
      # - name: List downloaded artifacts
      #   run: ls -l

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag name (e.g., "v0.1.0") for the release
          tag_name: ${{ github.ref_name }}
          # Automatically generate release notes from commits since the last tag
          generate_release_notes: true
          # Upload all the downloaded files (archives)
          # The wildcard '*' picks up all files downloaded in the previous step.
          files: |
            *.tar.gz
            *.zip